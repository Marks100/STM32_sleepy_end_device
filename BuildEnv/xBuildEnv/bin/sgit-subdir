#!/usr/bin/env ruby

require 'docopt'
require 'fileutils'
require 'logger'
require 'open3'
require 'pathname'
require 'terminal-table'

# My App Class for storing app related info, like logger info
class MyApp
  attr_reader :logger
  def initialize(name, debug = false)
    @logger = Logger.new($stdout).tap do |log|
      log.progname = name
    end

    # simplify logger output format
    @logger.formatter = proc do |severity, datetime, progname, msg|
      "#{severity}: #{msg}\n"
    end
    @logger.level = (debug == true ? Logger::DEBUG : Logger::INFO)
  end
end

# handles subdirs at a project level
class Project
  # initializes class
  def initialize(dir, options, logger)
    dir = '.' if dir.nil? # use current directory if none is spec-ed
    @dir = File.expand_path(dir, Dir.pwd)
    @options = options
    @logger = logger

    raise ArgumentError, "#{@dir}, is not a directory" unless File.directory? @dir
  end

  # runs check for all confirmed subdirs within project and outputs warnings
  def check
    confirmed_subdirs.each do |subdir|
      sd = SubDir.new('logger' => @logger, 'DEST_PATH' => subdir)
      rel_path = Pathname.new(sd.dest_path).relative_path_from Pathname.new(Dir.pwd)

      status = sd.status
      if status[:modified]
        modified_warn = 'SubDir modified since last add or update, avoid modifying Subdirs'
        output_warning(rel_path, modified_warn)
      end

      no_changelog_warn = "SubDir has no change log, add a CHANGELOG.md to source repository to allow notable changes to be tracked while offline"
      output_warning(rel_path, no_changelog_warn) unless status[:changelog]

      uptodate_warn = "SubDir is not up to date, update to latest: #{status[:latest]}"
      output_warning(rel_path, uptodate_warn) if status[:text].include? 'No'
    end
  end

  # lists all project subdirs
  def list
    table = Terminal::Table.new do |t|
      t << %w( SubDir Repo SrcDir Tag Modified UpToDate?)
      t << :separator
    end

    confirmed_subdirs.each do |subdir|
      sd = SubDir.new('logger' => @logger, 'DEST_PATH' => subdir)
      status = sd.status
      @logger.debug "status: #{status}"
      rel_path = Pathname.new(sd.dest_path).relative_path_from Pathname.new(Dir.pwd)
      table.add_row([rel_path, sd.repo, sd.src_path, sd.treeish,
                     status[:modified], "#{status[:text]} #{status[:latest]}"]) if sd.repo
    end

    puts table
  end

  private

  def confirmed_subdirs
    confirmed = []
    possible_subdirs.each do |subdir|
      args = { 'logger' => @logger, 'DEST_PATH' => subdir }
      begin
        psubdir = SubDir.new(args)
        confirmed << subdir if psubdir.repo

      # possibility that subdir is not valid and can not be init
      rescue ArgumentError => e
        @logger.debug "#{subdir}, #{e.message}"
        # Ok to continue with next subdir
      end
    end
    confirmed
  end

  # works out possible subdirs from directory naming convention
  def possible_subdirs
    subdir_regex = /x[A-Z][\w-]*$/
    git_files = `git ls-tree -r --name-only HEAD #{@dir}`.split("\n")
    git_dirs = git_files.map { |file| File.dirname(file) }.uniq
    sub_dirs = git_dirs.select { |dir| dir =~ %r{.*/#{subdir_regex}} }

    # above logic does not pick up the current directory, so lets check
    sub_dirs << @dir if @dir =~ subdir_regex
    @logger.debug sub_dirs
    sub_dirs
  end

  def output_warning(file, message, line = 1, column = 0)
    puts "#{file}:#{line}:#{column} warning: #{message}"
  end
end

# handles everything related to retrieving Git sub dir
class SubDir
  attr_reader :repo, :treeish, :src_path, :dest_path

  # initializes class
  def initialize(args)
    @logger = args['logger']
    @options = args
    @dest_path = File.expand_path(@options['DEST_PATH'], Dir.pwd)

    init_via_args
    init_via_existing_subdir unless init?
    raise ArgumentError, 'Failed to init with given args' unless init?

    @existing = File.directory? @dest_path
  end

  def add
    @treeish = interactive_treeish if @treeish.nil?
    check('add')
    setup
    retrieve_changelog
    retrieve_and_extract
    stage
    commit('add')
  end

  # updates an exiting subdir to a new tag
  def update(treeish=nil)
    @treeish = treeish
    @treeish = interactive_treeish if treeish.nil?
    check('update')
    rm_all_files
    rm_all_folders
    retrieve_changelog
    retrieve_and_extract
    stage
    commit('update')
  end

  # returns status for given subtree
  def status
    status = {}
    rc_tag = latest_rc_tag
    status[:latest] = rc_tag
    status[:modified] = !subdir_sha1_ok?
    status[:changelog] = changelog_present?

    # check if subdir is currently up to date
    status[:text] = '???'
    status[:text] = 'Yes' if rc_tag == @treeish
    status[:text] = 'No' if !rc_tag.nil? && rc_tag != @treeish

    status
  end

  # check all things are good before making all modifications to local repo
  def check(command)
    error('Destination directory must following SEL naming convention of xMSN e.g. xSTDC') unless dest_dir_ok?

    unless treeish_ok?
      message = "#{@treeish} is not a tag"
      @options['--force'] ? @logger.warn(message) : error(message)
    end

    error('Staging area is not empty, commit or stash staged files') unless staging_area_empty?

    # command specific checks
    case command
    when 'add'
      # for add check that directory is empty
      error("One or more files within #{@dest_path} currently under version control") unless (versioned_files.count == 0)
    when 'update'
      # if it's an existing subdir then check sha1's
      unless subdir_sha1_ok?
        # Interactive confirmation that it's OK to overwrite
        @logger.warn 'subdir files are modified since last commit'
        puts 'Enter \'Confirm\' to overwrite current subdir files'
        confirmation = $stdin.gets.chomp
        error("Overwrite not confirmed, aborting #{command} command") unless confirmation == 'Confirm'
      end
    end
  end

  private

  # initialises class via command-line args
  def init_via_args
    @repo = @options['REPO']
    @treeish = @options['TREEISH']
    @src_path = @options['SRC_PATH']
  end

  # initialises class via working out from exiting subdir commit meta-data
  def init_via_existing_subdir
    @logger.debug @dest_path
    info = metadata
    @repo = info[:repo]
    @treeish = info[:treeish]
    @src_path = info[:src_path]
  end

  # interactively prompts user for treeish (tag) to be used
  def interactive_treeish
      # list available tags, and prompt for choice
      tags = remote_tags
      puts 'Available tags:'
      puts tags.join("\n")
      puts 'Enter tag to use'
      treeish = $stdin.gets.chomp
      unless tags.include? treeish
        message = "#{treeish} is not a valid tag"
        @options['--force'] ? @logger.warn(message) : error(message)
      end
      treeish
  end

  # checks if class has been fully initialised
  def init?
    !(@repo.nil? || @src_path.nil? || @dest_path.nil?)
  end


  # checks if destination directory naming convention is correct
  def dest_dir_ok?
    name = File.split(@dest_path)[-1]
    name =~ /x[A-Z]*/ ? true : false
  end

  # checks if treeish is a tag or branch, and warns if not a tag
  def treeish_ok?
    cmd = "git ls-remote --tags #{@repo}"
    @logger.debug cmd
    result = `#{cmd}`
    result.include? @treeish
  end

  def staging_area_empty?
    staged_files = `git diff --name-only --cached`.split("\n")
    staged_files.count == 0 ? true : false
  end

  # checks if subdir sha
  def subdir_sha1_ok?
    @logger.debug "Current subdir #{Dir.pwd} sha1: #{subdir_sha1}, Last subdir sha1: #{metadata[:sha1]}"
    subdir_sha1 == metadata[:sha1]
  end

  # checks if subdir has a changelog
  def changelog_present?
    cmd = "ls #{@dest_path}"
    `#{cmd}`.include? 'CHANGELOG'
  end

  # returns the latest and greatest RC release
  # Note: to use 'Gem::Version', tag must be of the correct format, see:
  # See http://ruby-doc.org/stdlib-2.0.0/libdoc/rubygems/rdoc/Gem/Version.html
  def latest_rc_tag
    rc_tags.inject do |latest, tag|
      Gem::Version.new(tag) > Gem::Version.new(latest) ? tag : latest
    end
  end

  # retrieve list of RC tags from remote repo
  def rc_tags
    remote_tags.select do |tag|
      (tag.split('.').length == 4) && (tag.split('.').last == 'RC')
    end
  end

  # outputs logger error and exits with failure code
  def error(message, error_code = 1)
    @logger.error message
    exit error_code
  end

  # gets all commits for possible subdir
  def read_last_commits
    `git log #{@dest_path}`
  end

  # gets all commits for an arbitrary file within possible subdir
  def read_last_changelog_commits
    first_file = `git ls-files #{@dest_path}`.lines.first
    `git log --follow #{first_file}`
  end

  # parses last commit info and extract useful subdir info
  def metadata
    info = search_for_subdir_metadata(read_last_commits)
    # if no subdir metadata found against directory, try checking file history
    # could be a directory rename which has cause history to be lost
    info = search_for_subdir_metadata(read_last_changelog_commits) unless info[:repo] && info[:treeish] && info[:src_path] && info[:sha1]
    @logger.debug "Last commit: #{info}"
    info
  end

  # searches log for relevant subdir meta data
  def search_for_subdir_metadata(log)
    metadata = {}
    info = {}
    log.split("\n").each do |line|
      case line
      # Each new commit starts with the Author
      when /Author: (?<Author>.*)$/
        info.clear
        info[:Author] = Regexp.last_match[:Author]
      when /commit (?<commit>.*)$/
        info[:commit] = Regexp.last_match[:commit]
      when /sgit-subdir-ref_url: (?<ref_url>.*)$/
        info[:ref_url] = Regexp.last_match[:ref_url]
      when /sgit-subdir-repo: (?<repo>.*)$/
        info[:repo] = Regexp.last_match[:repo]
      when /sgit-subdir-treeish: (?<treeish>.*)$/
        info[:treeish] = Regexp.last_match[:treeish]
      when /sgit-subdir-src_path: (?<src_path>.*)$/
        info[:src_path] = Regexp.last_match[:src_path]
      when /sgit-subdir-sha1: (?<sha1>.*)$/
        info[:sha1] = Regexp.last_match[:sha1]
      end

      # check if we have a commit with all required info
      if info[:repo] && info[:treeish] && info[:src_path] && info[:sha1]
        metadata = info
        break
      end
    end
    @logger.debug "Last commit: #{metadata}"
    metadata
  end

  # create, cleanup and switch to destination directory
  def setup
    return if @existing
    FileUtils.mkdir_p @dest_path
  end

  # retrieves remote tags, alphabetically sorted
  def remote_tags
    cmd = "git ls-remote --tags #{@repo}"
    @logger.debug cmd
    result = `#{cmd}`
    tags = []
    result.split("\n").each do |line|
      tag = line.split('/').last.split('^').first
      tags << tag
    end
    sorted_tags = []
    unless tags.empty?
      sorted_tags = tags.uniq!.sort! unless tags.empty?
      @logger.debug "Sorted tags: #{sorted_tags.join(' ')}"
    end
    sorted_tags
  end

  def versioned_files
    cmd = "git ls-tree --name-only HEAD #{@dest_path}"
    @logger.debug cmd
    `#{cmd}`.split("\n")
  end

  # removes all files from destination path
  def rm_all_files
    exec_cmd("rm -f #{@dest_path}/*")
    exec_cmd("rm -f #{@dest_path}/.*")
  end

  # removes all subfolders from destination path
  def rm_all_folders
    cmd = "rm -rf #{@dest_path}/*/"
    exec_cmd(cmd)
  end

  # retrieves Git directory in archive format and extracts to dest dir
  def retrieve_and_extract
    components = @src_path.delete('.').split('/').count
    cmd = "git archive -v --remote=#{@repo} #{@treeish} #{@src_path} | tar -x -C #{@dest_path} --strip-components=#{components}"
    unless exec_cmd(cmd).success?
      @logger.error "Failed to retrieve source files for #{@repo} #{@treeish} #{@src_path}"
      exit 1
    end
    @treeish = treeish
  end

  # retrieves changelog for given remote repo if available
  def retrieve_changelog
    %w(CHANGELOG.md CHANGELOG).each do |file|
      cmd = "git archive -v --remote=#{@repo} #{treeish} #{file} | tar -x -C #{@dest_path}"
      exec_cmd(cmd)
    end
  end

  # gets sha1 for source repo and treeish (tag \ branch)
  def remote_commit_sha1
    cmd = "git ls-remote #{@repo} #{@treeish}"
    `#{cmd}`.split(' ').first
  end

  # calculates a recursive subdir sha1 for all versioned files
  def subdir_sha1
    # note conversion to unix file endings
    cmd = "git ls-files #{@dest_path} | xargs cat | sed \"s/^M$//\" | sha1sum"
    @logger.debug "#{cmd}"
    `#{cmd}`.split(' ').first
  end

  # gets GitLab project url
  def project_url
    @repo.tr(':', '/').gsub('git@', 'http://').gsub('.git', '')
  end

  # work out http reference to the origin
  def ref_url
    "#{project_url}/tree/#{remote_commit_sha1}/#{@src_path}"
  end

  # creates an origin.url with link to GitLab gui to browse source code
  def add_origin_url
    File.open('origin.url', 'w') do |file|
      file.puts('[InternetShortcut]')
      file.puts("URL=#{ref_url}")
      file.puts('IconFile=http://www.google.com/favicon.ico')
      file.puts('IconIndex=0')
    end
  end

  # generates a md5 file to allow checking of files
  def md5_check
    md5sums = `md5sum *`
    File.open('checklist.md5', 'w') { |file| file.puts md5sums }
  end

  # stages retrieved files
  def stage
    # note use of --force option so that even files in .gitignore are added
    cmd = "git add --force #{@dest_path}/."
    exec_cmd(cmd)
  end

  # commits staged files to Git repository with some useful info in commit msg
  def commit(command='add')
    action = 'Added' if command == 'add'
    action = 'Updated' if command == 'update'
    prefix = File.basename($PROGRAM_NAME)
    summary = "#{action} subdir files from #{@repo.split('/').last}/#{@src_path} #{@treeish} #{remote_commit_sha1.slice(0..6)}"
    msg  = summary
    msg += "\n\n"
    msg += "#{prefix}-ref_url: #{ref_url}\n"
    msg += "#{prefix}-repo: #{@repo}\n"
    msg += "#{prefix}-treeish: #{@treeish}\n"
    msg += "#{prefix}-src_path: #{@src_path}\n"
    msg += "#{prefix}-sha1: #{subdir_sha1}"

    cmd = "git commit -m \"#{msg}\""

    if exec_cmd(cmd).success?
      @logger.info "Successfully #{summary}"
    else
      @logger.error "Failed to #{summary}"
      exit 1
    end
  end

  # executes a command using popen3, waits for command to complete then returns
  # error \ exit code
  def exec_cmd(cmd)
    exit_status = 0x5A
    # a lot of git commands write info to std err, use popen to execute to avoid
    # pollution of output
    Open3.popen3(cmd) do |_stdin, _stdout, _stderr, wait_thr|
      exit_status = wait_thr.value
      @logger.debug "executed: #{cmd}, exit code: #{exit_status}"
    end
    exit_status
  end
end

if $PROGRAM_NAME == __FILE__

  # ****************************************************************************
  #   \brief          Main Program
  # ****************************************************************************
  # Grab just the filename for convenience

  # Name of this file
  NAME = File.basename($PROGRAM_NAME)
  PTLD = File.expand_path(ENV['PTLD'])

  # Version information string
  VERSION_NUM = '1.0.5.RC'.freeze

  # Description of Tool and version
  VERSION = %(
  ##############################################################################
  #  #{NAME} #{VERSION_NUM}
  #  Git Tool to retrieve a specific directory contents from a Git Repository,
  #  stage and commit contents into the current local Git repository
  #
  #  Copyright (C) 2016 Sensata Technologies.
  ##############################################################################
).freeze

  # Build the options!  Notice that #{VERSION} will include a newline at end
  DOC_OPT = %(
  #{VERSION}
  Usage:
    #{NAME} add [-df] REPO SRC_PATH DEST_PATH [TREEISH]
    #{NAME} check [-d] [DIR]
    #{NAME} list [-d] [DIR]
    #{NAME} update [-df] DEST_PATH [TREEISH]
    #{NAME} -h | --help
    #{NAME} --version

  Commands:
    add       Adds a new subdir to the project
    check     Runs various checks on subdirs and outputs compiler style warnings
    list      List all current subdirs
    update    Allows switching an existing subdir to a different tag

  Arguments:
    REPO      Source Git repository
    SRC_PATH  Source path within REPO to retrieve
    TREEISH   Source branch name, tag name
    DEST_PATH Destination path within local repository, must use SEL naming convention of xMSN
    DIR       Directory to recursively apply command to

  Examples:
    #{NAME} list src/COMMON_MODULES
    #{NAME} check src/COMMON_MODULES
    #{NAME} add git@sanpgit01.schrader.local:common-modules/sstdlib.git cm/src src/COMMON_MODULES/xSSTDLIB
    #{NAME} add git@sanpgit01.schrader.local:common-modules/sstdlib.git cm/src src/COMMON_MODULES/xSSTDLIB 1.2.1.RC
    #{NAME} add git@sanpgit01.schrader.local:tools/buildenv.git xBuildEnv BuildEnv/xBuildEnv
    #{NAME} update src/COMMON_MODULES/xSSTDLIB
    #{NAME} update src/COMMON_MODULES/xSSTDLIB 1.2.1.RC

  Options:
    -d --debug        Output of debug messages
    -f --force        forces it
    -h --help         Show this screen.
    -v --version      Show version.

  User Manual: http://sanpgit01.schrader.local/tools/buildenv/wikis/sgit-flow
).freeze


  # Extract options!
  options = {}
  begin
    options = Docopt.docopt(DOC_OPT)
  rescue Docopt::Exit => e
    puts e.message
    puts "\nFor further help try \'#{NAME} --help\'"
    exit 1
  end

  ma = MyApp.new(NAME, options['--debug'])
  ma.logger.debug options

  if options['add']
    args = options
    args['logger'] = ma.logger
    subdir = SubDir.new(args)
    subdir.add
  elsif options['update']
    args = options
    args['logger'] = ma.logger
    subdir = SubDir.new(args)
    subdir.update(options['TREEISH'])
  elsif options['check']
    begin
     project = Project.new(options['DIR'], options, ma.logger)
     project.check
    rescue ArgumentError => e
      ma.logger.error e.message.to_s
      exit 1
    end
  elsif options['list']
    begin
     project = Project.new(options['DIR'], options, ma.logger)
     project.list
    rescue ArgumentError => e
      ma.logger.error e.message.to_s
      exit 1
    end
  end

end
