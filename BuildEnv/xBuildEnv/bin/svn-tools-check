#!/usr/bin/env ruby

require 'docopt'
require 'logger'
require 'yaml'
require 'open3'

# My App Class for storing app related info, like logger info
class SvnToolsChecker
  attr_reader :logger

  def initialize(name, ttld)
    @logger = Logger.new($stdout).tap do |log|
      log.progname = name
    end

    @ttld = ttld

    # simplify logger output format
    @logger.formatter = proc do |severity, _datetime, _progname, msg|
      "#{severity}: #{msg}\n"
    end

    @logger.level = Logger::INFO
  end

  def check_tools_folder
    @logger.debug "Checking TTLD which is #{@ttld}"

    if working_dir_rev != head_rev
      print_warning(working_dir_rev, head_rev)

      update_working_copy if user_wants_update?
    else
      @logger.info "OKAY. Working copy revision #{working_dir_rev} is up to date"
      sleep(0.8)
    end

  # end check_tools_folder
  end

  # Private functions
  private

  def working_dir_rev
    rtnval = 0

    Dir.chdir(@ttld) do
      current_info = `svn info`

      @logger.debug current_info

      unless current_info =~ /Last Changed Rev: (?<rev>\d+)/
        @logger.error 'Something is wrong with SVN, I couldn\'t retrieve the version info'
      end
      rtnval = Regexp.last_match(:rev).to_i
    end
    # end working_dir_rev
  end

  def head_rev
    rtnval = 0

    Dir.chdir(@ttld) do
      current_info = `svn info -r HEAD`

      @logger.debug current_info

      unless current_info =~ /Last Changed Rev: (?<rev>\d+)/
        @logger.error 'Something is wrong with SVN, I couldn\'t retrieve the version info'
      end
      rtnval = Regexp.last_match(:rev).to_i
    end
    # end head_rev
  end

  def user_wants_update?
    puts 'Do you want to update now? [Y]'
    a = gets.strip.downcase

    a == 'y' || a == 'yes' || a == ''
    # end user_wants_update?
  end

  def update_working_copy
    @logger.info 'Updating Working Copy - Please be patient'

    Dir.chdir(@ttld) do
      Open3.popen2e('svn update') do |stdin, stdout_stderr, wait_thread|
        Thread.new do
          stdout_stderr.each { |l| puts l }
        end

        stdin.close

        wait_thread.value
      end

      @logger.info 'Update Compete'
    end
    # end update_working_copy
  end

  def missing_commits(wc_rev)
    rtn = ''
    Dir.chdir(@ttld) do
      rtn = `svn log -r#{wc_rev + 1}:HEAD -l 10"`
    end
    rtn
  end

  def print_warning(wc_rev, head_rev)
    puts '########################################################################'
    puts '#                              WARNING                                 #'
    puts '########################################################################'
    puts 'Your SVN_Tools folder is currently out of date. You should update to the'
    puts 'latest version as soon as possible.'
    puts ''
    puts 'Details:'
    puts "Working Copy Revision: #{wc_rev}"
    puts "Latest Head Revision:  #{head_rev}"
    puts ''
    puts 'Commits You Are Missing (Max 10):'
    puts missing_commits(wc_rev)
    puts '########################################################################'
    puts ''
    # end print_warning
  end

  # end class
end

if $PROGRAM_NAME == __FILE__

  # ****************************************************************************
  #   \brief          Main Program
  # ****************************************************************************
  # Grab just the filename for convenience

  # Name of this file
  NAME = File.basename($PROGRAM_NAME)

  # Tool Top Level Directory
  TTLD = File.expand_path(ENV['TTLD'])

  # Version information string
  VERSION_NUM = '1.0.0.RC'.freeze

  # Description of Tool and version
  VERSION = %(
  ########################################################################
  #  #{NAME} #{VERSION_NUM}
  #  Utility tool that checks if SVN_Tools folder is up to date
  #
  #  Copyright (C) 2016 Sensata Technologies.
  ########################################################################
).freeze

  # Build the options!  Notice that #{VERSION} will include a newline at end
  DOC_OPT = %(
  #{VERSION}
  Usage:
    #{NAME}
    #{NAME} -h | --help
    #{NAME} --version

  Options:
    -h --help         Show this screen.
    -v --version      Show version.
).freeze

  checker = SvnToolsChecker.new(NAME, TTLD)

  # Extract options!
  options = {}
  begin
    options = Docopt.docopt(DOC_OPT)
  rescue Docopt::Exit => e
    puts e.message
    exit 1
  end

  checker.logger.debug options

  checker.logger.info "Checking #{TTLD} is up to date..."
  checker.check_tools_folder

  exit 0
end
