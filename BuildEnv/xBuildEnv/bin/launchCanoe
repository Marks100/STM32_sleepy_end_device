#!/usr/bin/env ruby

require 'docopt'
require 'win32ole'

# Grab just the filename for convenience
NAME = File.basename($0)
PTLD = File.expand_path(ENV['PTLD'])
RX_ABS_PATH = /[A-Za-z]:[\/\\]/

# Version information string
VERSION_NUM = "1.0"
VERSION = <<END_VERSION
########################################################################
#  #{NAME} #{VERSION_NUM}
#  Launches CANoe, opens config and starts measurement
#  Copyright (C) 2015 Sensata Technologies.
########################################################################
END_VERSION

# Build the options!  Notice that #{VERSION} will include a newline at end
DOC_OPT = <<DOCOPT
#{VERSION}
Usage:
  #{NAME} [options]
  #{NAME} [options] <config.cfg>
  #{NAME} -h | --help
  #{NAME} --version

Options:
  -d --dongle=<name>        Specify dongle to use e.g. CANoe_CAN or CANoe_CAN_FlexRay
  -i                        Invisible
  -t                        Start test & Quit CANoe after the test has completed
  --version                 Show version info.
  -h --help                 Show this screen.
DOCOPT

def show_wait_cursor(seconds,fps=10)
  chars = %w[| / - \\]
  delay = 1.0/fps
  (seconds*fps).round.times{ |i|
    print chars[i % chars.length]
    sleep delay
    print "\b"
  }
end

#***************************************************************************************************
#   \brief          Main Program
#***************************************************************************************************
# Command Line Support ###############################
if ($0 == __FILE__)

  # Extract options!
  options = {}
  begin
    options = Docopt::docopt(DOC_OPT)
  rescue Docopt::Exit => e
    puts e.message
    exit
  end

  if( options["--dongle"] )
    `cmd /C "ConnectToUsbDevice.bat connect #{options["--dongle"]}"`
  end

  app = WIN32OLE.new("CANoe.Application")
  measurement = app.Measurement

  #puts app.ole_methods

  if( options["-i"] )
    app.Visible = false
  end

  # if measurement is already running then stop 
  if  measurement.Running
      measurement.Stop
      puts "Measurement already running... Stopping Measurement"
  end

  if( options["<config.cfg>"] )
    abs_config = File.expand_path( options["<config.cfg>"], Dir.pwd )
    puts "Opening Config #{abs_config}"
    app.Open( abs_config )
  end

  app.CAPL.Compile

  namespace = app.System.namespaces("Test")
  start_test = namespace.Variables("StartTest")
  test_status = namespace.Variables("TestStatus")

  puts "Starting Measurement"
  measurement.Start

  # allow time for measurement to start
  sleep(10)

  if( options["--dongle"] )
    # disconnect USB dongle since no longer needed
    `cmd /C "ConnectToUsbDevice.bat disconnect #{options["--dongle"]}"`
  end

  # check if in test mode
  if( options["-t"] ) 
    # start test via system environmenet variable
    start_test.Value = 1
    print "Test Running"

    # wait until test is complete
    while ( ( test_status.Value != 3 ) && ( test_status.Value != 4 ) )
      show_wait_cursor(5)
    end
    puts "\nTest Finished"

    # stop, quit and then exit
    measurement.Stop
    app.Quit
    sleep(1)
  end

  exit 0

end