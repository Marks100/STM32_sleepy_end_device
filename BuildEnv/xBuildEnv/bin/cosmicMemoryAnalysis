#!/usr/bin/env tclsh

set inFilename [lindex $argv 0]
set inSelectedProgram [ lindex $argv 1 ]
set inUseRamThresholds [lindex $argv 2 ]
set inRamThresholdsValue [lindex $argv 3 ]


# **************************************************************
# Procedure:
# 
# Name:
#
# Description:
#
# Inputs:
#
# Returns/Outputs:
#
# **************************************************************
proc linkerFlashAnalyser { inputMapFileName } {
	
	set S12X_FLASH_START_ADDRESS [ expr 0x7c0000 ]
	set S12X_FLASH_END_ADDRESS	 [ expr 0x7fffff ]
	
			
	# S12XS256 has 16K FLASH pages, expressing it as x * 1024 so 16K isn't mistaken as 16000
	set S12X_FLASH_PAGE_SIZE [ expr 16 * 1024 ]
	
	# only 14/16 FLASH pages are available to the application space
	set S12X_TOTAL_FLASH_AVAILABLE [ expr 14 * $S12X_FLASH_PAGE_SIZE ]
	
	# first check to see if filename exists
	if { [ file exists $inputMapFileName ] == 1 } {
	
		# create a results file
		set fileHandle [ open "FlashAnalysisResults.csv" w+ ];
		set muFileHandle [ open "MemoryUsageSummary.yml" w+ ];
        
		# create a file to hold some data, make it read only for getting the data(r)
		set handle [ open $inputMapFileName r ];

		# pull all of the data into a variable for manipulation later
		set fileData [ read $handle ];

		# finised with the file now, close it up
        close $handle;
		
		# separate the data into lines differentiated by a newline
        set data [ split $fileData "\n" ];
		
		# assume we have not yet found a header
		set headerFound 0;
		set stopSearch 0;
		set lineCount 1
		set totalFLASHUsedForSection 0
		set totalFLASHUsed 0
		set blankLineSkipCount 1

		set searchStateMachine "MATCH_FLASH_REGIONS"
		
		foreach line $data {
			
			# only continue while stopSearch == 0
			if { $stopSearch == 0 } {
				
				# instead of counting lines to the start, lets look for the line with the correct header sequence
				# and once its found we know to start after that(of course ignoring blank lines)
				if { $headerFound == 0 } {
					if { [string match "*Segments*" $line ] } {
						set headerFound 1;
					} else {
						
					}
				} else {
					
					# following 2 lines are only for debugging, used to only use a portion of the file
					if { $lineCount >= 1 } {
						if { $lineCount <= 100000 } {
							if { [string match "MATCH_FLASH_REGIONS" $searchStateMachine ] } {
								if { [string match "*start*end*" $line ] } {
									# step 1 - split the current line on spaces so we can look for the individual addresses
									set tempCurrentLine [ split $line " " ];
									set currentLine [ join $tempCurrentLine " " ]
									
									# Step 2 - extract the hex representation from the map file
									set hexAddressStart [ lindex $currentLine 1 ]
									
									# Step 3 - Convert the hex to a decimal value for comparison to our address ranges which will be decimal
									set addressStart [ scan $hexAddressStart %08x ]
								
									# may not need this at all
									set addressEnd   [ lindex $currentLine 3 ]
									
									set sectionName [ lindex $currentLine 7 ]
									
									# check if it is a FLASH address or not
									if { [ expr { $addressStart >= $S12X_FLASH_START_ADDRESS } ] } {
										if { [ expr { $addressStart <= $S12X_FLASH_END_ADDRESS } ] } {
											# Now to format this in a way that can be used in excel to plot usage nicely
											
											# also keep running total of FLASH
											set tempFlashUsed [ lindex $currentLine 5 ]
											
											set totalFLASHUsedForSection [ expr { $totalFLASHUsedForSection + $tempFlashUsed } ]
											
											puts $currentLine
										}
									} else {
										#puts "$$$ Not a FLASH_ADDRESS:: AddressStart = $addressStart      FLASH_ADDRESS_START = $S12X_FLASH_START_ADDRESS"
									}
								} elseif { [string length $line ] == 0 } {
									# Blank line is the separator to look for a new object file
									
									# However there is 1 blank line between the header and the start of useful stuff, don't let it trip up the script
									if { $blankLineSkipCount == 0 } {
										
										# Keep the running total of RAM used
										set totalFLASHUsed [ expr $totalFLASHUsed + $totalFLASHUsedForSection ]
										
										# starting a new section, zero RAM total
										set totalRAMUsedForSection 0
										
										break
									} else {
										set blankLineSkipCount [ expr $blankLineSkipCount - 1 ]
									}
								}
							}
						}
					}
				}
			} else {
				puts "exiting loop...."
				break
			}
			
			incr lineCount;
		}
		
		######
		# Output some handy summaries for the command line, quick ref or debugging
		######
		# calculate % RAM used
		set percentageFlashUsed [expr 100.0 * [expr double($totalFLASHUsed) / double($S12X_TOTAL_FLASH_AVAILABLE)]];
		
		puts "**********************************************************"
		puts "FLASH Available    = $S12X_TOTAL_FLASH_AVAILABLE bytes"
		puts "Total FLASH used   = $totalFLASHUsed bytes"
		puts "FLASH available    = [ expr $S12X_TOTAL_FLASH_AVAILABLE - $totalFLASHUsed ] bytes"
		puts "% FLASH used       = $percentageFlashUsed"
		puts "**********************************************************"
		
		puts $fileHandle "**********************************************************"
		puts $fileHandle "FLASH Available    = $S12X_TOTAL_FLASH_AVAILABLE bytes"
		puts $fileHandle "Total FLASH used   = $totalFLASHUsed bytes"
		puts $fileHandle "FLASH available    = [ expr $S12X_TOTAL_FLASH_AVAILABLE - $totalFLASHUsed ] bytes"
		puts $fileHandle "% FLASH used       = $percentageFlashUsed"
		puts $fileHandle "**********************************************************"
		
		close $fileHandle;
		
		puts $muFileHandle "---" 
        puts $muFileHandle "RomUsage:"
        puts $muFileHandle "  currentUsage: [ expr $totalFLASHUsed ]"
        puts $muFileHandle "  Available: $S12X_TOTAL_FLASH_AVAILABLE"
        puts $muFileHandle "  currentPercent: $percentageFlashUsed"
		close $muFileHandle;
        
		return $totalFLASHUsed
		
	} else {
		puts "file does not exist"
	}
}

# **************************************************************
# Procedure:
# 
# Name:
#
# Description:
#
# Inputs:
#
# Returns/Outputs:
#
# **************************************************************
proc linkerRamAnalyser { inputMapFileName enableRamThresholdChecking RamThreshold } {
	
	# first check to see if filename exists
	if { [ file exists $inputMapFileName ] == 1 } {
		
		puts stdout "Module RAM Analysis running [clock format [clock seconds] -format {%d:%m:%y::%H:%M:%S}]";
		
		# create a results file
		set fileHandle [ open "RamAnalysisResults.csv" w+ ];
		set muFileHandle [ open "MemoryUsageSummary.yml" a ];
        
		# create a file to hold some data, make it read only for getting the data(r)
		set handle [ open $inputMapFileName r ];

		# pull all of the data into a variable for manipulation later
		set fileData [ read $handle ];

		# finised with the file now, close it up
        close $handle;
		
		# separate the data into lines differentiated by a newline
        set data [ split $fileData "\n" ];
		
		# assume we have not yet found a header
		set headerFound 0;
		set stopSearch 0;
		set lineCount 1
		set totalRAMUsedForSection 0
		set totalRAMUsed 0
		set totalObjectsAnalysed 0
		set currentObjectFile ""
		
		set S12X_RAM_ADDRESS_START [ expr 0xfd000 ]
		set S12X_RAM_ADDRESS_END   [ expr 0xfffff ]
		
		# S12XS256 has 12K of RAM, expressing it as x * 1024 so 12K isn't mistaken as 12000
		set S12X_TOTAL_RAM_AVAILABLE [ expr 12 * 1024 ]
		
		# set the threshold where we want to flag a module up for high RAM usage
		set RAM_WARNING_THRESHOLD $RamThreshold
		set useRamThresholds	  $enableRamThresholdChecking
		
		set searchStateMachine "MATCH_OBJECT_FILES"
		
		foreach line $data {
			
			# only continue while stopSearch == 0
			if { $stopSearch == 0 } {
				
				# instead of counting lines to the start, lets look for the line with the correct header sequence
				# and once its found we know to start after that(of course ignoring blank lines)
				if { $headerFound == 0 } {
					if { [string match "*Segments*" $line ] } {
						set headerFound 1;
					} else {
						
					}
				} else {
					
					# following 2 lines are only for debugging, used to only use a portion of the file
					if { $lineCount >= 1 } {
						if { $lineCount <= 100000 } {
											
							#
							# Check which state we are operating in 
							#
							if { [string match "MATCH_OBJECT_FILES" $searchStateMachine ] } {
								if { [string match "*.o:*" $line ] } {
									
									set currentObjectFile $line
									
									regexp {[\\)]([a-zA-Z0-9_]*\.o)} $currentObjectFile objectNameOnly
									regsub {[\\)]} $objectNameOnly {} objectNameOnly
									
									# now looking for any RAM addresses for this object, move search state machine onto RAM_MATCH
									set searchStateMachine "MATCH_ALL_RAM_ADDRESSES"
									
								} elseif { [string match "*Stack usage*" $line ] } {
									# do not continue processing past this point
									break
									
								} else {
									#puts "Something else!!"
									
								}
							} elseif { [string match "MATCH_ALL_RAM_ADDRESSES" $searchStateMachine ] } {
								if { [string match "*start*end*" $line ] } {
									# now need to determine what is a RAM address, look for any number in the range RAM_ADDRESS_START - RAM_ADDRESS_END
									
									# step 1 - split the current line on spaces so we can look for the individual addresses
									set tempCurrentLine [ split $line " " ];
									set currentLine [ join $tempCurrentLine " " ]
									
									# Step 2 - extract the hex representation from the map file
									set hexAddressStart [ lindex $currentLine 1 ]
									
									# Step 3 - Convert the hex to a decimal value for comparison to our address ranges which will be decimal
									set addressStart [ scan $hexAddressStart %08x ]
								
									# may not need this at all
									set addressEnd   [ lindex $currentLine 3 ]
									
									set sectionName [ lindex $currentLine 7 ]
									
									# check if it is a RAM address or not
									if { [ expr { $addressStart >= $S12X_RAM_ADDRESS_START } ] } {
										if { [ expr { $addressStart <= $S12X_RAM_ADDRESS_END } ] } {
											# Now to format this in a way that can be used in excel to plot usage nicely
											
											# also keep running total of RAM
											set tempRamUsed [ lindex $currentLine 5 ]
											
											set totalRAMUsedForSection [ expr { $totalRAMUsedForSection + $tempRamUsed } ]
											
										}
									} else {
										#puts "$$$ Not a RAM_ADDRESS:: AddressStart = $addressStart      RAM_ADDRESS_START = $RAM_ADDRESS_START"
									}
								} elseif { [string length $line ] == 0 } {
									# Blank line is the separator to look for a new object file
									set searchStateMachine "MATCH_OBJECT_FILES"
									
									# total up the number of modules analysed
									set totalObjectsAnalysed [ incr totalObjectsAnalysed ]
									
									# Keep the running total of RAM used
									set totalRAMUsed [ expr $totalRAMUsed + $totalRAMUsedForSection ]
									
									# check whether it exceeds the usage threshold, only if it is greater or equal store the object
									if { $useRamThresholds == 1 } {
										if { [ expr $totalRAMUsedForSection >= $RAM_WARNING_THRESHOLD ] } {
											puts $fileHandle "$objectNameOnly $totalRAMUsedForSection"
											
											# just finished a section, output the totals for it
											puts "$objectNameOnly $totalRAMUsedForSection"
										}
									} else {
										puts $fileHandle "$objectNameOnly $totalRAMUsedForSection"
											
										# just finished a section, output the totals for it
										puts "$objectNameOnly $totalRAMUsedForSection"
									}
									
									# starting a new section, zero RAM total
									set totalRAMUsedForSection 0
								}
							}
						}
					}
				}
			} else {
				puts "exiting loop...."
				break
			}
			
			incr lineCount;
		}
		
		######
		# Output some handy summaries for the command line, quick ref or debugging
		######
		# calculate % RAM used
		set percentageRamUsed [expr 100.0 * [expr double($totalRAMUsed) / double($S12X_TOTAL_RAM_AVAILABLE)]];
		
		puts "**********************************************"
		puts "Objects analysed = $totalObjectsAnalysed"
		puts "Total RAM used   = $totalRAMUsed bytes"
		puts "Total RAM free   = [ expr $S12X_TOTAL_RAM_AVAILABLE - $totalRAMUsed ] bytes"
		puts "% RAM used       = $percentageRamUsed %"
		puts "**********************************************"
		
		puts $fileHandle "**********************************************"
		puts $fileHandle "Objects analysed = $totalObjectsAnalysed"
		puts $fileHandle "Total RAM used   = $totalRAMUsed bytes"
		puts $fileHandle "Total RAM free   = [ expr $S12X_TOTAL_RAM_AVAILABLE - $totalRAMUsed ] bytes"
		puts $fileHandle "% RAM used       = $percentageRamUsed %"
		puts $fileHandle "**********************************************"
		close $fileHandle;
        
        puts $muFileHandle "RamUsage:"
        puts $muFileHandle "  currentUsage: [ expr $totalRAMUsed ]"
        puts $muFileHandle "  Available: $S12X_TOTAL_RAM_AVAILABLE"
        puts $muFileHandle "  currentPercent: $percentageRamUsed"
		close $muFileHandle;
        
		return $totalRAMUsed
		
	} else {
		puts "file does not exist"
	}
}

# **************************************************************
# Procedure:
# 
# Name:
#
# Description:
#
# Inputs:
#
# Returns/Outputs:
#
# **************************************************************
proc linkerAllAnalyser { inputMapFileName } {
	puts "Analyse both FLASH and RAM memory usage:"
	
	set flashUsed 0
	set ramUsed 0
	
	set flashUsed [ linkerFlashAnalyser $inputMapFileName ]
	
	# don't enable RAM threshold checks
	set ramUsed [ linkerRamAnalyser $inputMapFileName 0 0 ]
	
	# generate the output results filename, build it from the input file
	set resultsFileName "MemoryAnalysisResults.csv"
	
	# create a file to output data into
	# open or create the results file
	set resultsFileHandle [ open $resultsFileName w+ ];
	
	puts $resultsFileHandle "FLASH,RAM"
	puts $resultsFileHandle "$flashUsed,$ramUsed"
	
	close $resultsFileHandle
}

# =======================================================================================
# =                               Start of program                                      =
# =======================================================================================
if { $inFilename == "" } {
	puts stdout "No input file specified"
	exit
} else {

	if { $inSelectedProgram == "FLASH" } {
		puts "Calling FLASH analyser:"
		puts "Map file name : $inFilename"
		
		linkerFlashAnalyser $inFilename
	} elseif { $inSelectedProgram == "RAM" } {
		puts "Calling RAM analyser:"
		puts "Map file name : $inFilename"
		if { $inUseRamThresholds == 1 } {
			puts "Use RAM thresholds : TRUE"
			puts "RAM Thresholds : $inRamThresholdsValue"
		} else {
			puts "Use RAM thresholds : FALSE"
		}
		
		# call the actual procedure now
		linkerRamAnalyser $inFilename $inUseRamThresholds $inRamThresholdsValue
	} elseif  { $inSelectedProgram == "ALL" } {
	
		# call both procedures and collate the results
		linkerAllAnalyser $inFilename
	
	
	} else {
		puts stdout "ERROR: ensure you specifiy a desired analysis program RAM/FLASH"
		exit
	}
}

