#!/usr/bin/env tclsh
set inFilename [lindex $argv 0]
set inFlashSize [lindex $argv 1]
set inFlashLimitPerc [lindex $argv 2]
set inRamSize [lindex $argv 3]
set inRamLimitPerc [lindex $argv 4]


#*******************************************************************************
#*
#*   \brief
#*
#*   \author
#*
#*   \param
#*
#*   \return         None
#*
#*******************************************************************************
proc bin2hex {bin} {
    set result ""

	set prepend [string repeat 0 [expr (4-[string length $bin]%4)%4]]

	foreach g [regexp -all -inline {[01]{4}} $prepend$bin] {
        foreach {b3 b2 b1 b0} [split $g ""] {
            append result [format %X [expr {$b3*8+$b2*4+$b1*2+$b0}]]
        }
    }

	return $result
}

#*******************************************************************************
#*
#*   \brief
#*
#*   \author
#*
#*   \param
#*
#*   \return         None
#*
#*******************************************************************************
proc dec2hex {dec} {
    set result ""

	set result [format %04X $dec]

	return $result
}

#*******************************************************************************
#*
#*   \brief
#*
#*   \author
#*
#*   \param
#*
#*   \return         None
#*
#*******************************************************************************
proc hexWordToBytes {hexWord high low} {

	upvar 1 $high highByte
	upvar 1 $low  lowByte

	set highByte [ string range $hexWord 0 1 ]
	set lowByte [ string range $hexWord 2 3 ]
}


#*******************************************************************************
#*
#*   \brief
#*
#*   \author
#*
#*   \param
#*
#*   \return         None
#*
#*******************************************************************************
proc getSizeFromLine {line } {

	regsub -all "\[ \n\]" $line {} flashRegion
	set flashRegion [ split $flashRegion "\t" ]

	#puts [ lindex $flashRegion 0 ]
	#puts [ lindex $flashRegion 1 ]
	#puts [ lindex $flashRegion 2 ]
	#puts [ lindex $flashRegion 3 ]

	set tempFlashUsed 0
	set tempFlashUsed [scan [ lindex $flashRegion 3 ] %x]

	#puts "Temp Flash used = $tempFlashUsed"

	return $tempFlashUsed
}

#*******************************************************************************
#*
#*   \brief
#*
#*   \author
#*
#*   \param
#*
#*   \return         None
#*
#*******************************************************************************
proc analyseMapFile { mapFileName totFlashSize flashLimitPerc totRamSize ramLimitPerc } {

	# create a file to hold some data, make it read only for getting the data(r)
	set handle [ open $mapFileName r ];

	# pull all of the data into a variable for manipulation later
	set fileData [ read $handle ];

	# finished with the file now, close it up
	close $handle;

	# separate the data into lines differentiated by a newline
    set data [ split $fileData "\n" ];

	# total up the FLASH sizes
	set totalFlashUsed 0
	set tempMemoryUsed 0

	puts "FLASH regions"

	# do all the FLASH regions first
	foreach line $data {
		if { [regexp {^\.rcw} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.text_vle} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.init} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.init_vle} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.exec_vect} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.exec_vect_Vle} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.vects} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.text} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.text_vle} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.rodata} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.ctors} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.dtors} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.sdata2} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.sbss2} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.sdata} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalFlashUsed [ expr $totalFlashUsed + $tempMemoryUsed ]
		} else {
			#puts "Throw away data line..."
		}
	}

	puts "\nRAM regions"
	# now do all the RAM regions

	set totalRamUsed 0

	foreach line $data {
		if { [regexp {^\.sbss} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalRamUsed [ expr $totalRamUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.bss} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalRamUsed [ expr $totalRamUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.tibss} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalRamUsed [ expr $totalRamUsed + $tempMemoryUsed ]
		} elseif { [regexp {^\.tidata} $line matchVar subMatchVar] } {
			set tempMemoryUsed [ getSizeFromLine $line ]
			set totalRamUsed [ expr $totalRamUsed + $tempMemoryUsed ]
		} else {
			#puts "Throw away data line..."
		}
	}

	set FLASHAvailable [ expr $totFlashSize * 1024 ]
	set RAMAvailable [ expr $totRamSize * 1024 ]

	set FLASHusedPercent [ expr (double($totalFlashUsed) / $FLASHAvailable) * 100 ]
	set RAMusedPercent [ expr (double($totalRamUsed) / $RAMAvailable) * 100 ]

	set FLASHLimit [ expr ( $FLASHAvailable * $flashLimitPerc ) / 100 ]
	set RAMLimit [ expr ( $RAMAvailable * $ramLimitPerc ) / 100 ]

	puts "total FLASH usage = $totalFlashUsed, Percent Used = $FLASHusedPercent%"
	puts "total RAM usage   = $totalRamUsed, Percent Used = $RAMusedPercent%"

	# dump out the statistics into a csv format to get picked up easily by Jenkins

	# generate the output results filename, build it from the input file
	set resultsFileName "diab_memory_usage.csv"

	# create a file to output data into
	# open or create the results file
	set resultsFileHandle [ open $resultsFileName w+ ];

	puts $resultsFileHandle "FLASH,FLASH_AVAIL,FLASH_LIMIT,%FLASH_USED,%FLASH_LIMIT,RAM,RAM_AVAIL,RAM_LIMIT,%RAM_USED,%RAM_LIMIT,100%"
	puts $resultsFileHandle "$totalFlashUsed,$FLASHAvailable,$FLASHLimit,$FLASHusedPercent,$flashLimitPerc,$totalRamUsed,$RAMAvailable,$RAMLimit,$RAMusedPercent,$ramLimitPerc,100"

	close $resultsFileHandle
}

# =======================================================================================
# =                               Start of program                                      =
# =======================================================================================
#*******************************************************************************
#*
#*   \brief
#*
#*   \author
#*
#*   \param
#*
#*   \return         None
#*
#*******************************************************************************
if { $inFilename == "" } {
	puts stdout "No input file specified"
	exit
} else {

	analyseMapFile $inFilename $inFlashSize $inFlashLimitPerc $inRamSize $inRamLimitPerc
}